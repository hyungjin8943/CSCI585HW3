public class Question1 {
	 public static class Map extends Mapper<LongWritable, Text, Text, IntWritable> {
	        private final static IntWritable one = new IntWritable(1);
	        private Text word = new Text();
	 
	        public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
	            String line = value.toString();
	            String[] substrings = line.split(",");
	            for(int i=0; i<substrings.length;i++){
	                word.set(substrings[i]);
	                context.write(word, one); //List <word, one>
	            }
	        }
	    } 
	 
	    public static class Reduce extends Reducer<Text, IntWritable, Text, IntWritable> {
	        public void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {
	            int sum = 0; // Reduce:List <word, list of "one"> -> < username , number of friends > 
	            for (IntWritable val : values) {
	                sum += val.get();
	            }
	            context.write(key, new IntWritable(sum));
	        }
	    }
	 
	    public static void main(String[] args) throws Exception {
	        Configuration conf = new Configuration();
	 
	        Job job = new Job(conf, "Question1");
	        job.setJarByClass(Question1.class);
	        job.setOutputKeyClass(Text.class);
	        job.setOutputValueClass(IntWritable.class);
	        
	        job.setMapperClass(Map.class);
	        job.setCombinerClass(Reduce.class);
	        job.setReducerClass(Reduce.class);
	 
	        job.setInputFormatClass(TextInputFormat.class);
	        job.setOutputFormatClass(TextOutputFormat.class);
	 
	        FileInputFormat.addInputPath(job, new Path(args[0]));
	        FileOutputFormat.setOutputPath(job, new Path(args[1]));
	 
	        job.waitForCompletion(true);
	    }        
	}


